{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-08T15:18:06.420Z",
    "end": "2025-05-08T15:18:18.102Z",
    "duration": 11682,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bf75fe7c-990c-4150-a639-5c4a7c467a07",
      "title": "",
      "fullFile": "cypress/e2e/api_celulares_spec.cy.js",
      "file": "cypress/e2e/api_celulares_spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "db69417b-ab45-45c6-a0cf-e0f4d3387ecb",
          "title": "Testes de API para Celulares",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve listar todos os celulares",
              "fullTitle": "Testes de API para Celulares Deve listar todos os celulares",
              "timedOut": null,
              "duration": 1440,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(\"Acessando a API para listar todos os celulares\");\ncy.request({\n  method: \"GET\",\n  url: \"/objects\"\n}).then(response => {\n  cy.log(\"Validação do status da resposta\");\n  expect(response.status).to.eq(200);\n  cy.log(\"Validação do corpo da resposta\");\n  expect(response.body).to.not.be.empty;\n  expect(response.body).to.be.an(\"array\");\n  if (response.body.length > 0) {\n    cy.log(\"Verificando a estrutura do primeiro objeto da lista\");\n    expect(response.body[0]).to.have.property(\"id\");\n    expect(response.body[0]).to.have.property(\"name\");\n  }\n  cy.log(\"Teste de listar todos os celulares concluído com sucesso\");\n});",
              "err": {},
              "uuid": "ca2752e7-cd57-4723-9a47-4c93b416256e",
              "parentUUID": "db69417b-ab45-45c6-a0cf-e0f4d3387ecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar um range específico de celulares",
              "fullTitle": "Testes de API para Celulares Deve listar um range específico de celulares",
              "timedOut": null,
              "duration": 1262,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Acessando a API para listar um range específico de celulares (IDs: ${apiData.listarRangeIds.join(\", \")})`);\ncy.request({\n  method: \"GET\",\n  url: `/objects?id=${apiData.listarRangeIds.join(\"&id=\")}`\n}).then(response => {\n  cy.log(\"Validação do status da resposta\");\n  expect(response.status).to.eq(200);\n  cy.log(\"Validação do corpo da resposta\");\n  expect(response.body).to.not.be.empty;\n  expect(response.body).to.be.an(\"array\");\n  const ids = response.body.map(item => item.id);\n  expect(ids).to.include.members(apiData.listarRangeIds);\n  cy.log(\"Teste de listar um range específico de celulares concluído com sucesso\");\n});",
              "err": {},
              "uuid": "a443e592-7784-48f0-b863-1c7eaad91a1e",
              "parentUUID": "db69417b-ab45-45c6-a0cf-e0f4d3387ecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar um celular pelo Id (ID reservado)",
              "fullTitle": "Testes de API para Celulares Deve listar um celular pelo Id (ID reservado)",
              "timedOut": null,
              "duration": 508,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(`Acessando a API para listar o celular com ID reservado: ${apiData.celularId}`);\ncy.request({\n  method: \"GET\",\n  url: `/objects/${apiData.celularId}`\n}).then(response => {\n  cy.log(\"Validação do status da resposta\");\n  expect(response.status).to.eq(200);\n  cy.log(\"Validação do corpo da resposta\");\n  expect(response.body).to.not.be.empty;\n  expect(response.body).to.be.an(\"object\");\n  cy.log(`Verificando se o ID do celular retornado é ${apiData.celularId}`);\n  expect(response.body.id).to.eq(apiData.celularId);\n  expect(response.body).to.have.property(\"name\");\n  cy.log(\"Teste de listar celular pelo Id (ID reservado) concluído com sucesso\");\n});",
              "err": {},
              "uuid": "a47365d7-6f3c-4a68-9a6c-a7ffea1be25f",
              "parentUUID": "db69417b-ab45-45c6-a0cf-e0f4d3387ecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve atualizar um campo específico de um celular recém-criado",
              "fullTitle": "Testes de API para Celulares Deve atualizar um campo específico de um celular recém-criado",
              "timedOut": null,
              "duration": 3252,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let novoCelularId;\ncy.log(\"Criando um novo celular para o teste de PATCH\");\ncy.request({\n  method: \"POST\",\n  url: \"/objects\",\n  body: apiData.postPayload // Usando um payload genérico para criação\n}).then(postResponse => {\n  expect(postResponse.status).to.eq(200);\n  novoCelularId = postResponse.body.id;\n  cy.log(`Novo celular criado com ID: ${novoCelularId} para o teste de PATCH`);\n  cy.log(`Acessando a API para atualizar o nome do celular com ID: ${novoCelularId}`);\n  return cy.request({\n    method: \"PATCH\",\n    url: `/objects/${novoCelularId}`,\n    body: apiData.patchPayload\n  });\n}).then(patchResponse => {\n  cy.log(\"Validação do status da resposta do PATCH\");\n  expect(patchResponse.status).to.eq(200);\n  cy.log(\"Validação do corpo da resposta do PATCH\");\n  expect(patchResponse.body).to.not.be.empty;\n  expect(patchResponse.body).to.be.an(\"object\");\n  cy.log(`Verificando se o nome do celular foi atualizado para: ${apiData.patchPayload.name}`);\n  expect(patchResponse.body.name).to.eq(apiData.patchPayload.name);\n  expect(patchResponse.body.id).to.eq(novoCelularId);\n  cy.log(\"Teste de atualizar um campo específico do celular concluído com sucesso\");\n  // Limpeza: Deletar o celular criado\n  cy.log(`Deletando o celular de teste com ID: ${novoCelularId}`);\n  return cy.request({\n    method: \"DELETE\",\n    url: `/objects/${novoCelularId}`\n  });\n}).then(deleteResponse => {\n  expect(deleteResponse.status).to.eq(200);\n  cy.log(`Celular de teste com ID: ${novoCelularId} deletado com sucesso.`);\n});",
              "err": {},
              "uuid": "d400fe2f-0dfa-40e0-962b-fb426073a415",
              "parentUUID": "db69417b-ab45-45c6-a0cf-e0f4d3387ecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um novo celular",
              "fullTitle": "Testes de API para Celulares Deve cadastrar um novo celular",
              "timedOut": null,
              "duration": 1059,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(\"Acessando a API para cadastrar um novo celular\");\ncy.request({\n  method: \"POST\",\n  url: \"/objects\",\n  body: apiData.postPayload\n}).then(response => {\n  cy.log(\"Validação do status da resposta\");\n  expect(response.status).to.eq(200);\n  cy.log(\"Validação do corpo da resposta\");\n  expect(response.body).to.not.be.empty;\n  expect(response.body).to.be.an(\"object\");\n  cy.log(\"Verificando se o celular cadastrado possui um ID\");\n  expect(response.body).to.have.property(\"id\");\n  cy.log(\"Verificando os dados do celular cadastrado\");\n  expect(response.body.name).to.eq(apiData.postPayload.name);\n  expect(response.body.data.year).to.eq(apiData.postPayload.data.year);\n  expect(response.body.data.price).to.eq(apiData.postPayload.data.price);\n  expect(response.body.data[\"CPU model\"]).to.eq(apiData.postPayload.data[\"CPU model\"]);\n  expect(response.body.data[\"Hard disk size\"]).to.eq(apiData.postPayload.data[\"Hard disk size\"]);\n  cy.log(\"Teste de cadastrar um novo celular concluído com sucesso\");\n  // Opcional: deletar o celular criado se não for usado em outros testes encadeados\n  const createdId = response.body.id;\n  cy.log(`Deletando o celular de teste (cadastro) com ID: ${createdId}`);\n  return cy.request({\n    method: \"DELETE\",\n    url: `/objects/${createdId}`\n  });\n}).then(deleteResponse => {\n  expect(deleteResponse.status).to.eq(200);\n  cy.log(`Celular de teste (cadastro) com ID deletado com sucesso.`);\n});",
              "err": {},
              "uuid": "03fd7e2b-5a41-41ac-b1bc-080ee250849e",
              "parentUUID": "db69417b-ab45-45c6-a0cf-e0f4d3387ecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve atualizar todos os dados de um celular recém-criado",
              "fullTitle": "Testes de API para Celulares Deve atualizar todos os dados de um celular recém-criado",
              "timedOut": null,
              "duration": 2379,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let novoCelularId;\ncy.log(\"Criando um novo celular para o teste de PUT\");\ncy.request({\n  method: \"POST\",\n  url: \"/objects\",\n  body: apiData.postPayload // Usando um payload genérico para criação\n}).then(postResponse => {\n  expect(postResponse.status).to.eq(200);\n  novoCelularId = postResponse.body.id;\n  cy.log(`Novo celular criado com ID: ${novoCelularId} para o teste de PUT`);\n  cy.log(`Acessando a API para atualizar todos os dados do celular com ID: ${novoCelularId}`);\n  return cy.request({\n    method: \"PUT\",\n    url: `/objects/${novoCelularId}`,\n    body: apiData.putPayload\n  });\n}).then(putResponse => {\n  cy.log(\"Validação do status da resposta do PUT\");\n  expect(putResponse.status).to.eq(200);\n  cy.log(\"Validação do corpo da resposta do PUT\");\n  expect(putResponse.body).to.not.be.empty;\n  expect(putResponse.body).to.be.an(\"object\");\n  cy.log(\"Verificando os dados atualizados do celular\");\n  expect(putResponse.body.id).to.eq(novoCelularId);\n  expect(putResponse.body.name).to.eq(apiData.putPayload.name);\n  expect(putResponse.body.data.year).to.eq(apiData.putPayload.data.year);\n  expect(putResponse.body.data.price).to.eq(apiData.putPayload.data.price);\n  expect(putResponse.body.data[\"CPU model\"]).to.eq(apiData.putPayload.data[\"CPU model\"]);\n  expect(putResponse.body.data[\"Hard disk size\"]).to.eq(apiData.putPayload.data[\"Hard disk size\"]);\n  expect(putResponse.body.data.color).to.eq(apiData.putPayload.data.color);\n  cy.log(\"Teste de atualizar todos os dados de um celular concluído com sucesso\");\n  // Limpeza: Deletar o celular criado\n  cy.log(`Deletando o celular de teste com ID: ${novoCelularId}`);\n  return cy.request({\n    method: \"DELETE\",\n    url: `/objects/${novoCelularId}`\n  });\n}).then(deleteResponse => {\n  expect(deleteResponse.status).to.eq(200);\n  cy.log(`Celular de teste com ID: ${novoCelularId} deletado com sucesso.`);\n});",
              "err": {},
              "uuid": "6bb35797-17ea-4f04-8517-4ca5f05f9734",
              "parentUUID": "db69417b-ab45-45c6-a0cf-e0f4d3387ecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um celular (cadastrar e depois excluir)",
              "fullTitle": "Testes de API para Celulares Deve deletar um celular (cadastrar e depois excluir)",
              "timedOut": null,
              "duration": 1611,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let celularIdCriado;\ncy.log(\"Cadastrando um novo celular para posterior exclusão\");\ncy.request({\n  method: \"POST\",\n  url: \"/objects\",\n  body: apiData.deletePayload\n}).then(response => {\n  cy.log(\"Validação do status da resposta do cadastro\");\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property(\"id\");\n  celularIdCriado = response.body.id;\n  cy.log(`Celular com ID: ${celularIdCriado} cadastrado para exclusão.`);\n  cy.log(`Acessando a API para deletar o celular com ID: ${celularIdCriado}`);\n  return cy.request({\n    method: \"DELETE\",\n    url: `/objects/${celularIdCriado}`\n  });\n}).then(deleteResponse => {\n  cy.log(\"Validação do status da resposta da exclusão\");\n  expect(deleteResponse.status).to.eq(200);\n  cy.log(\"Validação do corpo da resposta da exclusão\");\n  expect(deleteResponse.body).to.have.property(\"message\");\n  expect(deleteResponse.body.message).to.include(`Object with id = ${celularIdCriado} has been deleted.`);\n  cy.log(`Celular com ID: ${celularIdCriado} deletado com sucesso.`);\n  cy.log(`Tentando buscar o celular deletado com ID: ${celularIdCriado} para confirmar a exclusão`);\n  return cy.request({\n    method: \"GET\",\n    url: `/objects/${celularIdCriado}`,\n    failOnStatusCode: false\n  });\n}).then(getResponse => {\n  cy.log(\"Validação do status da resposta ao tentar buscar o celular deletado\");\n  expect(getResponse.status).to.eq(404);\n  cy.log(\"Teste de deletar um celular (cadastrar e depois excluir) concluído com sucesso\");\n});",
              "err": {},
              "uuid": "f1cc171c-9269-4710-9b33-d7c2c0f1af35",
              "parentUUID": "db69417b-ab45-45c6-a0cf-e0f4d3387ecb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca2752e7-cd57-4723-9a47-4c93b416256e",
            "a443e592-7784-48f0-b863-1c7eaad91a1e",
            "a47365d7-6f3c-4a68-9a6c-a7ffea1be25f",
            "d400fe2f-0dfa-40e0-962b-fb426073a415",
            "03fd7e2b-5a41-41ac-b1bc-080ee250849e",
            "6bb35797-17ea-4f04-8517-4ca5f05f9734",
            "f1cc171c-9269-4710-9b33-d7c2c0f1af35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11511,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true,
        "charts": true
      },
      "version": "6.2.0"
    }
  }
}